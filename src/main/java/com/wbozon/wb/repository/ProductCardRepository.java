package com.wbozon.wb.repository;

import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.wbozon.wb.api.classes.ProductCard;

import lombok.extern.slf4j.Slf4j;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.io.*;
@Slf4j
public class ProductCardRepository {
    private final Path filePath;
    private final Gson gson = new GsonBuilder().setPrettyPrinting().create();

    public ProductCardRepository(String filename) {
        this.filePath = Paths.get(filename);
    }
 public void save(List<ProductCard> cards) {
       long start = System.currentTimeMillis();
        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –û–ë–´–ß–ù–£–Æ –∑–∞–ø–∏—Å—å –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ñ–∞–π–ª ...");
       try (BufferedWriter writer = Files.newBufferedWriter(filePath)) {
           gson.toJson(cards, writer);
             long duration = System.currentTimeMillis() - start;
            log.info("üèÅ –û–±—ã—á–Ω–∞—è –ó–∞–ø–∏—Å—å –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {} –º—Å", duration);
       } catch (IOException e) {
           System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫: " + e.getMessage());
       }
   }

   public List<ProductCard> load() {
        long start = System.currentTimeMillis();
        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞ ...");
       
        if (!Files.exists(filePath)) return new ArrayList<>();
        try (BufferedReader reader = Files.newBufferedReader(filePath)) {
            Type type = new TypeToken<List<ProductCard>>() {}.getType();
            long duration = System.currentTimeMillis() - start;
            log.info("üèÅ –ß—Ç–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {} –º—Å", duration);
            return gson.fromJson(reader, type);
        } catch (IOException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫: " + e.getMessage());
            return new ArrayList<>();
        }
   }
    // –ü–æ—Ç–æ–∫–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    public void saveStreamed(List<ProductCard> cards) {
          long start = System.currentTimeMillis();
        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ü–û–¢–û–ö–û–í–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ñ–∞–π–ª ...");
        try (BufferedWriter writer = Files.newBufferedWriter(filePath);
             JsonWriter jsonWriter = new JsonWriter(writer)) {

            jsonWriter.beginArray();
            for (ProductCard card : cards) {
                gson.toJson(card, ProductCard.class, jsonWriter);
            }
            jsonWriter.endArray();

            System.out.println("‚úÖ  –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ " + cards.size() + " –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ñ–∞–π–ª: " + filePath);
             long duration = System.currentTimeMillis() - start;
        log.info("üèÅ –ü–æ—Ç–æ–∫–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {} –º—Å", duration);
        } catch (IOException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫: " + e.getMessage());
        }
    }

    // –ü–æ—Ç–æ–∫–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    public List<ProductCard> loadStreamed() {
        List<ProductCard> result = new ArrayList<>();
        if (!Files.exists(filePath)) {
            System.out.println("‚ö† –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: " + filePath);
            return result;
        }

        try (BufferedReader reader = Files.newBufferedReader(filePath);
             JsonReader jsonReader = new JsonReader(reader)) {

            jsonReader.beginArray();
            int count = 0;

            while (jsonReader.hasNext()) {
                ProductCard card = gson.fromJson(jsonReader, ProductCard.class);
                result.add(card);
                count++;

                if (count % 1000 == 0) {
                    System.out.printf("üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: %d –∫–∞—Ä—Ç–æ—á–µ–∫...\r", count);
                }
            }

            jsonReader.endArray();
            System.out.println("\n‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ–≥–æ: " + count + " –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞: " + filePath);

        } catch (IOException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫: " + e.getMessage());
        }

        return result;
    }
}
